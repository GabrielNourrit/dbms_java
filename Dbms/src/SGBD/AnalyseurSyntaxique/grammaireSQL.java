/* Generated By:JavaCC: Do not edit this line. grammaireSQL.java */
package SGBD.AnalyseurSyntaxique;
import java.util.ArrayList;

import SGBD.*;
import SGBD.BDD.*;
import SGBD.Gestion.*;
import SGBD.BDD.type.*;

public class grammaireSQL implements grammaireSQLConstants {
  public static void main(String args []) throws ParseException
  {
    grammaireSQL parser = new grammaireSQL(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an SQL expression:");
      try
      {
        String t=grammaireSQL.interrogation();
        System.out.println(t);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        grammaireSQL.ReInit(System.in);
      }
      catch (Error e)
      {
                e.printStackTrace();
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public String interrogation() throws ParseException {
                        String t;
    t = expression_recherche();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERBY:
      clause_tri();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(29);
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void clause_tri() throws ParseException {
    jj_consume_token(ORDERBY);
    liste_criteres_tri();
  }

  static final public void liste_criteres_tri() throws ParseException {
    critere_tri();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(30);
      critere_tri();
    }
  }

  static final public void critere_tri() throws ParseException {
    resultat_recherche();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDRE:
      type_classement();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void resultat_recherche() throws ParseException {
    jj_consume_token(EXPRESSION);
  }

  static final public void type_classement() throws ParseException {
    jj_consume_token(ORDRE);
  }

  static final public String expression_recherche() throws ParseException {
                               String t;
    t = terme_recherche();
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public String terme_recherche() throws ParseException {
                          String t;
    t = specification_recherche();
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public String specification_recherche() throws ParseException {
  TablesRecherche t;
  Table[] table;
  Select r;
  String[] attribut;
  String[][] contraintesVides={ };
  Condition contraintes=new Condition("",contraintesVides);
  String orderby="";
    jj_consume_token(SELECT);
    attribut = specifiation_resultats_recherche();
    t = specification_donnees_recherche();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      contraintes = specification_condition_recherche();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
          table = new Table[2];
          table[0]=t.table1;
          table[1]=t.table2;
          r=new Select(table,attribut,contraintes.contraintes,contraintes.typeCondition,t.join,orderby);
          {if (true) return r.select();}
    throw new Error("Missing return statement in function");
  }

  static final public String[] specifiation_resultats_recherche() throws ParseException {
 ArrayList<String> a= new ArrayList<String>();String s;String[] attribut={"*"};
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
          {if (true) return attribut;}
      break;
    case EXPRESSION:
      s = element_liste_recherche();
                                       a.add(s);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(30);
        s = element_liste_recherche();
                                           a.add(s);
      }
          attribut = new String[a.size()];
          for( int i=0; i<attribut.length;i++ ) attribut[i]=a.get(i);
          {if (true) return attribut;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String element_liste_recherche() throws ParseException {
 String s;
    s = colonne_recherche();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String colonne_recherche() throws ParseException {
 Token t;
    t = jj_consume_token(EXPRESSION);
                    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public TablesRecherche specification_donnees_recherche() throws ParseException {
  TablesRecherche s;
    s = specification_tables_recherche();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public TablesRecherche specification_tables_recherche() throws ParseException {
 Table s;TableJointure jointures= new TableJointure();
    jj_consume_token(FROM);
    s = reference_table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NJ:
    case JOIN:
      label_3:
      while (true) {
        jointures = jointure();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NJ:
        case JOIN:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return new TablesRecherche(s,jointures.table,jointures.join);}
    throw new Error("Missing return statement in function");
  }

  static final public Table reference_table() throws ParseException {
 Token t;String[] jointures= { };
    t = jj_consume_token(EXPRESSION);
          {if (true) return new Table(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public TableJointure jointure() throws ParseException {
 Token t1,t2;Table t;ArrayList<String> a= new ArrayList<String>(); String[] jointures= { };
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NJ:
      t1 = jj_consume_token(NJ);
      t = reference_table();
          jointures = new String[1];
          jointures[0]=t1.image;
          {if (true) return new TableJointure(t,jointures);}
      break;
    case JOIN:
      jj_consume_token(JOIN);
      t = reference_table();
      jj_consume_token(ON);
      jj_consume_token(31);
      t1 = jj_consume_token(ATTRIBUT);
      jj_consume_token(operateur_comparaison);
      t2 = jj_consume_token(ATTRIBUT);
      jj_consume_token(32);
  jointures = new String[2];
  jointures[0]=t1.image;
  jointures[1]=t2.image;
  {if (true) return new TableJointure(t,jointures);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Condition specification_condition_recherche() throws ParseException {
 Condition contraintes;
    jj_consume_token(WHERE);
    contraintes = condition_recherche();
    {if (true) return contraintes;}
    throw new Error("Missing return statement in function");
  }

  static final public Condition condition_recherche() throws ParseException {
 Condition c;String typeContrainte="AND";String[][] contraintes;Token t0,t1,t2,t3;String[] s = {"","",""};ArrayList<String[]> a= new ArrayList<String[]>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t1 = jj_consume_token(STRING);
      break;
    case EXPRESSION:
      t1 = jj_consume_token(EXPRESSION);
      break;
    case CONSTANT:
      t1 = jj_consume_token(CONSTANT);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t2 = jj_consume_token(operateur_comparaison);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t3 = jj_consume_token(STRING);
      break;
    case EXPRESSION:
      t3 = jj_consume_token(EXPRESSION);
      break;
    case CONSTANT:
      t3 = jj_consume_token(CONSTANT);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           s[0]=t1.image;s[1]=t2.image; s[2]=t3.image;
           a.add(s.clone());
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_OR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      t0 = jj_consume_token(AND_OR);
                  typeContrainte=t0.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t1 = jj_consume_token(STRING);
        break;
      case EXPRESSION:
        t1 = jj_consume_token(EXPRESSION);
        break;
      case CONSTANT:
        t1 = jj_consume_token(CONSTANT);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = jj_consume_token(operateur_comparaison);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t3 = jj_consume_token(STRING);
        break;
      case EXPRESSION:
        t3 = jj_consume_token(EXPRESSION);
        break;
      case CONSTANT:
        t3 = jj_consume_token(CONSTANT);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    s[0]=t1.image;s[1]=t2.image; s[2]=t3.image;
    a.add(s.clone());
    }
    contraintes = new String[a.size()][3];
        for( int i=0; i<a.size();i++ ) {
          contraintes[i]=a.get(i);
        }
        c = new Condition(typeContrainte,contraintes);
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public grammaireSQLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x40000000,0x40,0x2000,0x40000000,0x480000,0x300,0x300,0x300,0x8c00000,0x8c00000,0x4000,0x8c00000,0x8c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public grammaireSQL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public grammaireSQL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new grammaireSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public grammaireSQL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new grammaireSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public grammaireSQL(grammaireSQLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(grammaireSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
